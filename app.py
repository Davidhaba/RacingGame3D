from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit
import uuid

app = Flask(__name__)
app.config["SECRET_KEY"] = "your-secret-key"
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∞–≤—Ü—ñ–≤: {player_id: {position, quaternion}}
players = {}

# =============================================
# WebSocket –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
# =============================================

@socketio.on("connect")
def handle_connect():
    """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è"""
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
        player_id = str(uuid.uuid4())
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
        players[player_id] = {
            "position": [0, 0, 0],
            "quaternion": [0, 0, 0, 1]
        }
        
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—É
        emit("init", {
            "id": player_id,
            "players": list(players.keys())  # –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —ñ—Å–Ω—É—é—á–∏—Ö ID
        })
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –ø—Ä–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
        emit("new_player", {"id": player_id}, broadcast=True, include_self=False)
        
        print(f"üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ: {player_id} | –í—Å—å–æ–≥–æ –≥—Ä–∞–≤—Ü—ñ–≤: {len(players)}")
        
    except Exception as e:
        print(f"üö® –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")


@socketio.on("disconnect")
def handle_disconnect():
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è"""
    try:
        player_id = request.sid
        
        if player_id in players:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –∑—ñ —Å–ø–∏—Å–∫—É
            del players[player_id]
            
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
            emit("player_left", {"id": player_id}, broadcast=True)
            
            print(f"üî¥ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ: {player_id} | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {len(players)}")
            
    except Exception as e:
        print(f"üö® –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")


@socketio.on("update_state")
def handle_state_update(data):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∞–≤—Ü—è"""
    try:
        player_id = request.sid
        
        if player_id in players:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            players[player_id] = data
            
            # –†–æ–∑—Å–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—à–∏–º –≥—Ä–∞–≤—Ü—è–º
            emit("state_update", {
                "id": player_id,
                "state": data
            }, broadcast=True, include_self=False)
            
    except Exception as e:
        print(f"üö® –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É: {e}")


# =============================================
# –ú–∞—Ä—à—Ä—É—Ç–∏
# =============================================

@app.route("/")
def index():
    return render_template("index.html")


# =============================================
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# =============================================
if __name__ == "__main__":
    socketio.run(
        app,
        host="0.0.0.0",
        port=5000,
        debug=True,
        allow_unsafe_werkzeug=True
    )
